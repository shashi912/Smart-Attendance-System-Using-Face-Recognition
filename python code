# =========================================================
# üéØ Smart Attendance System using Face Recognition
# =========================================================

import cv2
import numpy as np
import face_recognition
import pandas as pd
from datetime import datetime
import os

# ---------------------------------------------
# Step 1: Load Known Images and Encode Faces
# ---------------------------------------------

path = 'ImagesAttendance'   # Folder with known faces
images = []
classNames = []

# Read all image files
for file in os.listdir(path):
    img = cv2.imread(f'{path}/{file}')
    images.append(img)
    classNames.append(os.path.splitext(file)[0])  # Extract name (e.g., John.jpg ‚Üí John)

print("‚úÖ Loaded known faces:", classNames)

# Encode known faces
def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
    return encodeList

encodeListKnown = findEncodings(images)
print("‚úÖ Encoding Complete")

# ---------------------------------------------
# Step 2: Mark Attendance in CSV File
# ---------------------------------------------

def markAttendance(name):
    df = pd.read_csv('Attendance.csv') if os.path.exists('Attendance.csv') else pd.DataFrame(columns=['Name','Time','Date'])
    now = datetime.now()
    timeStr = now.strftime('%H:%M:%S')
    dateStr = now.strftime('%Y-%m-%d')
    # Check if already marked for today
    if not ((df['Name'] == name) & (df['Date'] == dateStr)).any():
        df.loc[len(df)] = [name, timeStr, dateStr]
        df.to_csv('Attendance.csv', index=False)
        print(f"‚úÖ Attendance marked for {name} at {timeStr}")
    else:
        print(f"‚ÑπÔ∏è {name} already marked for today.")

# ---------------------------------------------
# Step 3: Capture Video Stream and Recognize Faces
# ---------------------------------------------

cap = cv2.VideoCapture(0)

while True:
    success, img = cap.read()
    imgS = cv2.resize(img, (0, 0), fx=0.25, fy=0.25)
    imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

    facesCurFrame = face_recognition.face_locations(imgS)
    encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

    for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
        matchIndex = np.argmin(faceDis)

        if matches[matchIndex]:
            name = classNames[matchIndex].upper()
            y1, x2, y2, x1 = faceLoc
            y1, x2, y2, x1 = y1*4, x2*4, y2*4, x1*4
            cv2.rectangle(img, (x1,y1), (x2,y2), (0,255,0), 2)
            cv2.rectangle(img, (x1, y2-35), (x2, y2), (0,255,0), cv2.FILLED)
            cv2.putText(img, name, (x1+6, y2-6), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
            markAttendance(name)

    cv2.imshow('Webcam', img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
